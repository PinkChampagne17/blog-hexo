{"pages":[],"posts":[{"title":"我的 2022 年总结","text":"回顾自己的 2022 年。 又摸了一年。","link":"/blog/2023/04/22/2022%E5%B9%B4%E6%80%BB%E7%BB%93/"},{"title":"Go语言的环境配置与Hello world","text":"这只是一个简单的示例，个别细节没做太多解释，可去官网或其他网站自行了解。 示例系统 Windows 10 安装 Go 语言开发工具根据自己的喜好在以下两个链接中，选择其中一个来下载 Go 语言开发工具，选择下载以.msi作为后缀名的 Windows 版。 Go 语言官网 Go 语言中文网 检查 Go 语言开发工具是否可用在命令行中直接输入Go命令，如果显示出如以下的提示，说明 Go 语言开发工具已经安装成功。 123456789101112131415161718192021222324252627&gt; goGo is a tool for managing Go source code.Usage: go &lt;command&gt; [arguments]The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get add dependencies to current module and install them install compile and install packages and dependencies list list packages or modules mod module maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages 安装编辑器在这个示例中我们使用 VS Code 作为 Go 语言的编辑器。 安装 VS Code VS Code 官网 安装 VS Code 插件打开 VS Code，选择左侧的 Extensions，查找并安装以下两个用于中文化和Go 语言的插件。 Chinese (Simplified) Language Pack for Visual Studio Code Go 安装/更新工具配置代理因为国内网络较为特殊的原因，需要配置代理才能通过网络安装/更新工具。 在命令行中输入以下命令配置代理。 12&gt; go env -w GO111MODULE=on&gt; go env -w GPROXY=https://goproxy.cn,direct 在 VS Code 中使用按Ctrl+Shift+P，在打开的输入框中输入Go，这时就可以看到名为Go: Install/Update Tools的选项。点击后将列出的所有工具勾上，再点击确认(OK)进行安装。 当 VS Code 自带的命令行出现类似以下的提示，安装项以SUCCEEDED结尾，说明该安装项已经安装成功。 12345678Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs SUCCEEDEDInstalling github.com/ramya-rao-a/go-outline SUCCEEDEDInstalling github.com/acroca/go-symbols SUCCEEDEDInstalling golang.org/x/tools/cmd/guru SUCCEEDEDInstalling golang.org/x/tools/cmd/gorename SUCCEEDEDInstalling github.com/cweill/gotests/... SUCCEEDEDInstalling github.com/fatih/gomodifytags SUCCEEDEDInstalling github.com/josharian/impl SUCCEEDED 如果出现了类似以下提示，那就是有安装项安装失败了。 11 tools failed to install. Hello, world!新建一个名为 hello-world 的文件夹，并在此文件夹下运行 go mod init {项目名}： 123&gt; mkdir hello-world # 新建名为hello-world文件夹&gt; cd ./hello-world # 切换目录到该文件夹下&gt; go mod init hello-world # 使用go mod进行初始化 新建一个名为main.go的文件，放入以下代码。 1234567package mainimport &quot;fmt&quot;func main() { fmt.Print(&quot;Hello, world!&quot;)} 使用命令行进入 main.go 所在的目录，使用以下命令运行我们刚刚编写的 Hello world 程序。 1&gt; go run main.go 最后命令行打印出以下内容，说明刚刚编写的 Hello world 程序已经成功运行。 1Hello, world!","link":"/blog/2020/07/19/Go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8EHello%20world/"},{"title":"Vue3.0 在 JSX&#x2F;TSX 下使用插槽(slot)","text":"在文档上没找到，使用搜索引擎也没见有人发表相关内容。最后在 vuejs/jsx-next 这个 repo 的 README.md 找到了解决方案，在这里分享给各位。 官方文档示例 个人示例 解构插槽 Props 官方文档示例注意: 在 jsx 中，应该使用 v-slots 代替 v-slot 123456789101112131415161718192021222324const App = { setup() { const slots = { foo: () =&gt; &lt;span&gt;B&lt;/span&gt;, }; return () =&gt; ( &lt;A v-slots={slots}&gt; &lt;div&gt;A&lt;/div&gt; &lt;/A&gt; ); },};// orconst App = { setup() { const slots = { default: () =&gt; &lt;div&gt;A&lt;/div&gt;, foo: () =&gt; &lt;span&gt;B&lt;/span&gt;, }; return () =&gt; &lt;A v-slots={slots} /&gt;; },}; 个人示例xxx.vue 12345678910111213&lt;van-image round width=&quot;7rem&quot; height=&quot;7rem&quot; fit=&quot;cover&quot; src=&quot;/img/AquaMinato.png&quot; style=&quot;display: block; margin: 0 auto;&quot;&gt; &lt;template v-slot:loading&gt; &lt;van-loading type=&quot;spinner&quot; size=&quot;20&quot; /&gt; &lt;/template&gt; &lt;template v-slot:error&gt;加载失败&lt;/template&gt;&lt;/van-image&gt; 这里我虽然用的是 TSX (TypeScript 的 JSX)，但用法应该和 JSX 是一样的。 xxx.tsx 123456789101112131415161718192021setup() { const slots = { loading: () =&gt; &lt;van-loading type=&quot;spinner&quot; size=&quot;20&quot; /&gt;, error: () =&gt; &lt;span&gt;加载失败&lt;/span&gt; } return () =&gt; ( &lt;div&gt; &lt;van-image round width=&quot;7rem&quot; height=&quot;7rem&quot; fit=&quot;cover&quot; src=&quot;/img/AquaMinato.png&quot; style=&quot;display: block; margin: 0 auto;&quot; v-slots={slots} &gt; &lt;/van-image&gt; &lt;/div&gt; )} 解构插槽 Props在 template 写法中： 123456789&lt;router-link to=&quot;/about&quot; custom v-slot=&quot;{ href, route, navigate, isActive, isExactActive }&quot;&gt; &lt;NavLink :active=&quot;isActive&quot; :href=&quot;href&quot; @click=&quot;navigate&quot;&gt; {{ route.fullPath }} &lt;/NavLink&gt;&lt;/router-link&gt; 在 JSX 写法中可以则可以是这样： 123456789&lt;router-link to=&quot;/about&quot; custom&gt; {{ default: ({ href, route, navigate, isActive, isExactActive }) =&gt; ( &lt;NavLink active={isActive} href={href} click={navigate}&gt; {route.fullPath} &lt;/NavLink&gt; ), }}&lt;/router-link&gt;","link":"/blog/2020/12/03/Vue3.0%E5%9C%A8JSX%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%8F%92%E6%A7%BD(slot)/"},{"title":"HTML 表格边框交叉点冲突解决方案","text":"前段时间有这么个需求，需要把表格修改成下面这个样式： .example-html th { text-align: center; padding: 0px 10px; } .example-html th { text-align: center; padding: 0px 10px; } .example-html table { border: 1px skyblue solid; } .example-html.example-desc-expected thead th { border-bottom: 10px skyblue solid; } .example-html tr td:first-child { border-right: 10px palevioletred solid } 姓名 介绍 田所浩二 24岁，是学生 蔡徐坤 喜欢唱、跳、rap、篮球 最开始编写的 HTML 与 CSS 如下： 123456789101112131415161718&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;介绍&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;田所浩二&lt;/td&gt; &lt;td&gt;24岁，是学生&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;蔡徐坤&lt;/td&gt; &lt;td&gt;喜欢唱、跳、rap、篮球&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 12345678910111213141516td, th { text-align: center; padding: 0px 10px;}table { border: 1px skyblue solid;}thead { border-bottom: 10px skyblue solid;}td:first-child { border-right: 10px palevioletred solid} 然而实际结果的结果如下，我们可以看到竖线与横线的交叉点是使用了竖线的颜色，而不是横线的颜色。 .example-html.example-desc-real thead { border-bottom: 10px skyblue solid; } 姓名 介绍 田所浩二 24岁，是学生 蔡徐坤 喜欢唱、跳、rap、篮球 如何解决这个问题呢？ 我在 CSS 规范中找到有这么一节内容，讲述了这个问题（原文）： If border styles differ only in color, then a style set on a cell wins over one on a row, which wins over a row group, column, column group and, lastly, table. When two elements of the same type conflict, then the one further to the left (if the table’s ‘direction’ is ‘ltr’; right, if it is ‘rtl’) and further to the top wins. 如果边框的样式区别只有颜色不同，则表格中的单元格会优先于行、行组、列、列组，以及表格边框的样式。当两个具有相同类型的元素冲突时，则最左边（如果 direction 为 ‘ltr’，否则反之）和最上面的元素优先。 按照这个规则，我们将 CSS 的选择器简单地修改一下，最后就能达成最开始所展示的预期效果了。 1234- thead {+ th { border-bottom: 10px skyblue solid;}","link":"/blog/2022/04/16/HTML%E8%A1%A8%E6%A0%BC%E8%BE%B9%E6%A1%86%E4%BA%A4%E5%8F%89%E7%82%B9%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"PHP 使用 MySQLi 对数据库进行 insert 操作时报错 Data truncated for column &#39;xxx&#39; at row 1","text":"PHP在 MySQLi 使用 SQL 语句INSET INTO student (sid, name, age, sex, uid) values (123, '123', '123', '男', 1)对数据库进行操作时出现了”Data truncated for column ‘xxx’ at row 1”的错误信息。 问题原因与解决方法这里以面向对象方法为例。 在数据库表创建时使用了default charset=utf8，但创建mysqli对象后没有使用set_charset()方法并填入参数&quot;utf-8&quot;，并且因为这条SQL语句中包含了中文字符，所以出现了报错。 123456--数据库创建表时使用了default charset=utf8CREATE TABLE user ( id int auto_increment primary key, uname varchar(20) not null, pwd varchar(20) not null)default charset=utf8; 1234$conn = new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;, &quot;student_management&quot;, 3306);// 在创建mysqli对象后设置charset为utf-8$conn-&gt;set_charset(&quot;utf8&quot;);","link":"/blog/2020/07/11/PHP%E4%BD%BF%E7%94%A8MySQLi%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%E6%93%8D%E4%BD%9C%E6%97%B6%E6%8A%A5%E9%94%99Data%20truncated%20for%20column%20'xxx'%20at%20row%201/"},{"title":"Windows 开发工具","text":"完善 Windows 开发环境。 Windows TerminalDocument 作为一个开发者避免不了需要使用终端的场景，而 Windows 以往默认的终端不好用也不好看。 现在你可以使用来自微软开发的新终端 Windows Terminal，它的界面已经得到了翻新，并且支持了许多以往没有的配置项。 新版本的 Windows 已经内置了 Windows Terminal 在系统中，你可以检查你的系统中是否已经安装，你可以通过 Microsoft Store 获取。 wingetDocument Microsoft 官方提供的包管理器。 这个工具的本质其实是从官网下载安装引导程序，自动地帮你点击下一步完成安装。这可能会导致你在安装某些软件后，还自动地帮你安装了全家桶。 当你不想要遵循引导程序中的默认设置时，请使用 -i 选项以使用交互式安装。 1winget install -i vscode 比如你可能需要在安装 VS Code 时，通过在安装引导程序内的选择帮你自动添加环境变量。或者是你在安装某些软件时，你需要取消勾选 checkbox 以避免安装全家桶。 Git Bash在安装 Windows 版的 Git 通常都会顺带安装 Git Bash，它使得我们可以在 Windows 下使用和 Linux 一样的命令，我们也可以在 Windows Terminal 中使用 Git Bash。 1234567# 创建一个新文件# PowerShell$ ni index.html# Git Bash$ touch index.html WSLDocument Windows 是最好用的 Linux 发行版之一。 WSL 是一种在 Windows 中运行 Linux 的方案，新的 WSL2 本质上是运行在 Windows 内置的虚拟机 Hyper-V 之上，但与 Windows 做了一些集成，方便与 Windows 共同协作。 虽然 WSL 与真正的 Linux 还是有些许差异，但已足够满足大部分的开发场景。 通常 WSL 是以终端的形式出现，但也可以运行图形化界面的应用。 如果你在使用 WSL 时遇到了一些问题，你可以到我的另一篇文章看看有没有你需要的答案。 目前由官方支持的发行版有：Ubuntu、Debian、SUSE、Oracle Linux 和 Kali 等，它们都可以被很方便地从 Microsoft Store 获取。 你可以在 GitHub 上找到类似 ArchWSL 之类的仓库，帮助你将你偏好的发行版运行在 WSL 上。 Hyper-V 的兼容问题WSL2 是运行在 Hyper-V 之上的，而 Hyper-V 与许多的虚拟机方案并不兼容。 如果你正在使用 VMware Workstation 或 VirtualBox，它们早在之前发布的版本就兼容了 Hyper-V。如果你使用的不是比较旧的版本，你无需担心。 如果你正在使用 Android 模拟器，可能就比较麻烦了。 你可以很方便地在 Android Studio 安装的 Android Emulator，它与 VMware Workstation 或 VirtualBox 一样，在较新的版本中都实装了对 Hyper-V 的兼容。 如你需要使用面向手游的 Android 模拟器如 BlueStacks 或者网易 Mumu 模拟器等，你可能就需要进行二选一的操作了。 虽然 BlueStacks 有提供一个兼容 Hyper-V 的测试版本，但是并不稳定。至少在我的尝试下，它并不能正常工作。而在开启了 Hyper-V 之后使用 Mumu 则会发生蓝屏的情况。 如果你只是偶尔使用 WSL，你可以尝试使用夜神模拟器（建议使用国际版且同样内置简体中文）。至少在我的电脑上，它会在运行前自动帮你关闭 Hyper-V，且不会像 Mumu 发生蓝屏 😥。 UWP LoopbackUWP 应用需要通过一些工具来使得它的网络请求会走到代理上。 这个是 Fiddler 提供的功能之一，如果你用的是 Clash for Windows，你可以在 Home 页就能看到 UWP Loopback，点击右侧的 Lunch Helper 就可以配置哪些 UWP 应用需要走代理。","link":"/blog/2022/04/30/Windows%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%AE%8C%E5%96%84/"},{"title":"使用 WSL2 作为开发环境的配置记录","text":"使用 WSL2 作为开发环境并不是一帆风顺的，还是需要做一些特别的配置。 无法使用个别命令 在 WSL 中启动 Windows 的 VS Code 使用命令行安装 Chrome 代理配置 使用的发行版与版本 Ubuntu 20.04 LTS Debian 11 无法使用个别命令例如使用 npm 命令就会出现下面这种情况，但我之前使用 WSL2 的 Ubuntu 18 就没有遇到过这种情况，但这次使用 Ubuntu 20 与 Debian 11 都出现了这种情况。 12$ npm install/usr/bin/env: ‘bash\\r’: No such file or directory 解决方法就是在 /etc/wsl.conf 文件下添加以下内容，具体原因与细节可以参考这个页面。 12[interop]appendWindowsPath = false 在 WSL 中启动 Windows 的 VS Code首先需要安装 VS Code 插件 Remote - WSL。 通常我们会使用在命令行中，使用 code 命令打开项目所在的目录，但在 WSL 直接使用 code 命令则可能会提示 Command not found。 123$ code .Command 'code' not found, but can be installed with: 我在 Ubuntu 上无法使用 code 命令，但在 Debian 则上可以使用，只是会提示我们需要手动安装一下相关的包。 我们可以通过添加 Windows 的 VS Code 所在的路径至 ~/.bashrc 中，实现在 WSL 中直接使用 code 命令使用 VS Code 打开当前所在的目录。 例如我的 VS Code 的安装目录是在 C:\\Program Files\\Microsoft VS Code，则在 ~/.bashrc 中添加以下内容，保存后重启 WSL。 1export PATH=$PATH:'/mnt/c/Program Files/Microsoft VS Code/bin' 使用命令行安装 Chrome有的时候我们需要在 WSL 中运行 Chrome，使用以下命令即可。 apt 是 Ubuntu 和 Debian 内置的包管理工具，如果你使用的是其他的发行版，请改用与之对应的包管理工具。 12345$ sudo apt install google-chrome-stable # 安装 Chrome$ google-chrome --version # 查看 Chrome 版本号，判断是否安装成功$ google-chrome # 启动 Chrome 或者使用 WSL 文档中提供的安装方法 Install Google Chrome for Linux 。 代理配置建议在 Windows 上使用 TUN 或者 SSTAP 这类全局代理的方式，方便省事。","link":"/blog/2022/04/09/%E4%BD%BF%E7%94%A8WSL2%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"},{"title":"一个使用 PHP 实现，功能简单的学生信息管理系统","text":"一个使用 PHP 实现，功能简单的学生管理系统，刚好够应付课堂作业用。 背景图片GitHub仓库 项目截图预览 实现功能 登录 注册 修改用户名 修改密码 使用cookie保持登录状态 对学生的增删查改 技术栈 PHP Bootstrap v4 MariaDB（与MySQL兼容） 测试环境 WampServer Version 3.2.0 64bit PHP 5.6.40 for CLI (Command-Line Interface) MariaDB 10.4.10 数据库创建语句123456789101112131415161718create database student_management;use student_management;CREATE TABLE user ( id int auto_increment primary key, uname varchar(20) not null, pwd varchar(20) not null)default charset=utf8;create table student ( id int primary key auto_increment, sid int not null, name varchar(15) not null, age int not null, sex enum('男', '女', '其他') not null, uid int not null, FOREIGN KEY(uid) REFERENCES user(id))default charset=utf8;","link":"/blog/2020/08/20/%E4%B8%80%E4%B8%AA%E4%BD%BF%E7%94%A8PHP%E5%AE%9E%E7%8E%B0%EF%BC%8C%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"title":"使用 WSL2 开发环境的体验","text":"使用 WSL2 作为实际项目中的开发环境有一段时间了，讲述一下我体验到的一些 WSL2 的优缺点。 优点 安装便捷 与 Windows 的整合 在使用 Linux 的环境的同时还能享受到 Windows 软件生态 缺点 内存与存储空间占用大 与 Windows 整合性可能也带来一些麻烦 图形界面缩放问题 Hyper-V 的兼容问题 由官方支持并适用于 WSL 的发行版少 我在 WSL 上使用的发行版为 Debian 和 Ubuntu。 优点安装便捷WSL 的安装非常的方便，由官方维护且适用于 WSL 的发行版可以直接通过 Microsoft Store 获取。安装完成后，会添加在开始菜单中，打开后设置好用户名与密码即可开始使用。 与 Windows 的整合WSL 会直接使用 Windows 上的网络，如我们在 WSL 上运行一个项目，它监听了 localhost:8080 这个地址和端口号，我们可以直接在 Windows 访问这个地址来预览该项目。 WSL 可以直接访问 Windows 下的目录，反之也可以。 在使用 Linux 的环境的同时还能享受到 Windows 软件生态这个应该不需要我多说了。 缺点内存与存储空间占用大WSL2 本质上其实是一个虚拟机，需要额外的 CPU、内存与存储空间的开销，这是无法避免的。 即使我用 WSL 只是用于运行项目，只使用了命令行并没有使用到图形界面，但有的时候内存使用量会非常高。 只在使用命令行的情况下，目前遇到 WSL 最高内存使用量是在 6G 多一点这样，加上在 Windows 这边运行的软件，差不多要把我的 16G 内存给吃满了。 通常为了方便，我会直接使用项目中的配置进行 E2E 测试，这样就无法避免的需要在 WSL 中开启 Chrome 并使用。虽然 Windows 这边也已经开启了 Chrome，但是它们无法共用，只能眼睁睁地看着电脑运行着两个 Chrome。 （虽然现在的电脑上同时有数个 chromium 在运行已经是常态了） 与 Windows 整合性可能也带来一些麻烦例如我想使用 n 来管理 Node.js 的版本，n 在安装时会检测是否已经安装过 Node.js。 如果在 Windows 上已经安装了 Node.js，它会在安装时提示我们已经在 Windows 的目录下安装过 Node.js 并停止安装 😅。 图形界面缩放问题例如我的显示设置是使用 150% 缩放比例，当我 WSL 运行 Chrome 的时候，发现 Chrome 的 UI 控件都非常小。很明显，这是使用了 100% 的缩放比例而而非系统设置中的 150%。 在高分辨率的屏幕的情况下，100% 的缩放比例是大部分人无法接受的。 根据这条 issue 来看，似乎目前只支持 100% 的倍数作为缩放比例。虽然可以通过一些配置可以支持像是 150% 这样的比例，但显然在其他人的反馈中，它可能会不起作用或表现得并不是很好。 Hyper-V 的兼容问题这一点可看我的另一篇文章。 由官方支持并适用于 WSL 的发行版少目前由官方支持并适用于 WSL 的发行版只有并不多，在 Linux 中的众多发行版中只是冰山一角。 虽然官方也提供了方案可供我们在 WSL 上选择自己的偏好的发行版，但相对来说比较的麻烦。我们也可以在 GitHub 上也可以找到由社区配置好的版本，不过这些版本并不是由官方维护的。","link":"/blog/2022/05/07/%E4%BD%BF%E7%94%A8WSL%E4%BD%9C%E4%B8%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E4%BD%93%E9%AA%8C/"},{"title":"在 Hexo 中使用 Material 主题","text":"本次使用主题的 GitHub Repo: bollnh/hexo-theme-material 下载主题 方式一：直接下载源代码 方式二：使用 Git 下载 应用主题 使用站内搜索插件 修改配置文件 参考资料 下载主题方式一：直接下载源代码下载后放在 theme 文件夹里。 Download latest release version 方式二：使用 Git 下载你可以自己决定想要使用的分支；仅限开发者使用。 1234cd themesgit clone https://github.com/viosey/hexo-theme-material.git materialcd materialgit checkout {branch/tags name} 应用主题修改**主目录**的_config.yml文件中的theme属性为material。 1theme: material 使用站内搜索插件安装 hexo-generator-search 插件。 修改**theme/material** 目录 _config.yml 中的 search 值 123search: use: local swiftype_key: 然后在**主目录**的_config.yml文件中添加 123search: path: search.xml field: all 修改配置文件修改**theme/material/layout/_widget/dnsprefetch.ejs**文件，否则会报错，修改内容如下： 12345&lt;% } else if(theme.comment.use.startsWith(&quot;disqus&quot;)) { %&gt;// 修改为&lt;% } else if(theme.comment.use &amp;&amp; theme.comment.use.startsWith(&quot;disqus&quot;)) { %&gt; 参考资料 bolnh/hexo-theme-material: Material Design theme for hexo. Hexo + Material + Github 搭建博客与配置 hexo s 依旧报错。 · Issue #686 · bolnh/hexo-theme-material","link":"/blog/2020/07/12/%E5%9C%A8Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8Material%E4%B8%BB%E9%A2%98/"},{"title":"探究在 JavaScript 中，Math.max() 和 Math.min() 在不填入参数的情况下为什么返回 -INFINITY 与 INFINITY","text":"在一张被广为流传的 JavaScript Meme（梗图）中，我们可以看到这么一个例子，Math.max() 在不填入的参数的情况下返回了 -INFINITY，Math.min() 在同样的情况下返回了 INFINITY。 明明是一个求最大数的方法，却返回了用于表示最小数的 -INFINITY，这让我感觉到有点匪夷所思。 想探寻为什么其实很简单，标准库的代码其实也是人写的，只要去找一下 Math.max() 与 Math.min() 的具体实现方式就能知道了。 以下文字内容建议配合附加的代码配合观看 以 Math.max() 为例，在 Chrome 浏览器所使用的 JavaScript 引擎，也就是 V8 引擎的 Math 库的源码中，我们可以看到当所填入的参数个数为 2 时，则使用 if 语句既可以实现返回最大值的功能。但当填入的参数个数不为 2 时，则是使用 for 循环遍历所有的参数，并使用一个变量 r 存储参数中最小的值。而变量 r 的在一开始被赋值为 -INFINITY，如果参数的个数为 0 时，则用于找出最小值的 for 语句块则不会被执行，所以直接返回了 -Infinity。 Math.min() 其实也是一个思路，这里就不多讲了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// ECMA 262 - 15.8.2.11function MathMax(arg1, arg2) { // length == 2 var length = %_ArgumentsLength(); // 如果参数的个数为2，直接使用if语句判断结果 if (length == 2) { arg1 = TO_NUMBER_INLINE(arg1); arg2 = TO_NUMBER_INLINE(arg2); if (arg2 &gt; arg1) return arg2; if (arg1 &gt; arg2) return arg1; if (arg1 == arg2) { // 如果两个参数都为0（如参数填入了0与-0），优先返回-0 // Make sure -0 is considered less than +0. return (arg1 === 0 &amp;&amp; %_IsMinusZero(arg1)) ? arg2 : arg1; } // All comparisons failed, one of the arguments must be NaN. return NAN; } // 如果参数的个数不为2，比如填入了0个、1个甚至多个参数时 // 通过遍历的方式找出最小值，并用变量r进行存储 var r = -INFINITY; // 如果参数个数为0，这下面的for语句块则不会执行 for (var i = 0; i &lt; length; i++) { var n = %_Arguments(i); if (!IS_NUMBER(n)) n = NonNumberToNumber(n); // Make sure +0 is considered greater than -0. if (NUMBER_IS_NAN(n) || n &gt; r || (r === 0 &amp;&amp; n === 0 &amp;&amp; %_IsMinusZero(r))) { r = n; } } return r;}// ECMA 262 - 15.8.2.12function MathMin(arg1, arg2) { // length == 2 var length = %_ArgumentsLength(); if (length == 2) { arg1 = TO_NUMBER_INLINE(arg1); arg2 = TO_NUMBER_INLINE(arg2); if (arg2 &gt; arg1) return arg1; if (arg1 &gt; arg2) return arg2; if (arg1 == arg2) { // Make sure -0 is considered less than +0. return (arg1 === 0 &amp;&amp; %_IsMinusZero(arg1)) ? arg1 : arg2; } // All comparisons failed, one of the arguments must be NaN. return NAN; } var r = INFINITY; for (var i = 0; i &lt; length; i++) { var n = %_Arguments(i); if (!IS_NUMBER(n)) n = NonNumberToNumber(n); // Make sure -0 is considered less than +0. if (NUMBER_IS_NAN(n) || n &lt; r || (r === 0 &amp;&amp; n === 0 &amp;&amp; %_IsMinusZero(n))) { r = n; } } return r;}","link":"/blog/2021/09/29/%E5%9C%A8JavaScript%E4%B8%AD%EF%BC%8CMath.max()%E5%92%8CMath.min()%E5%9C%A8%E4%B8%8D%E5%A1%AB%E5%85%A5%E5%8F%82%E6%95%B0%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%94%E5%9B%9E-INFINITY%E4%B8%8EINFINITY/"},{"title":"如何关闭 Cloudflare 的 Access policy (How to disable the Access policy of Cloudflare)","text":"本文讲述如何在不绑定信用卡的情况下关闭 Cloudflare 的 Access policy。 This post describes that how to disable the Access policy of Cloudflare without credit card. 前言 必要条件 操作流程 获取自己的 identifier 获取自己的 X-Auth-Key 获取 Access policy 的 ID 关闭 Access policy 参考资料 前言最近使用在使用 Cloudflare Pages 部署静态网页的过程中，不小心开启了 Access-policy，导致访问部署项目的历史版本都需要经过验证，但想进入关闭 Access-policy 的页面，必须要先绑定了信用卡。 这次属实是被 Cloudflare 给恶心到了，还好找到了解决方法，也就是通过调用 API 的方式去关闭这个功能。 必要条件 熟悉 HTTP 协议接口的使用 熟悉 curl 的操作方式 操作流程根据 Cloudflare API 的文档，获取List Access Applications。 1GET accounts/:identifier/access/apps 官方示例： 1234curl -X GET &quot;https://api.cloudflare.com/client/v4/accounts/699d98642c564d2e855e9661899b7252/access/apps&quot; \\ -H &quot;X-Auth-Email: user@example.com&quot; \\ -H &quot;X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41&quot; \\ -H &quot;Content-Type: application/json&quot; 对 API 请求数据很简单，X-Auth-Email 很明显是我们账户绑定的邮箱，但是 url 参数中的 identifier 与 X-Auth-Key 的值应该如何获得？ 获取自己的 identifier登录 Cloudflare 之后，我们可以在主页的 URL 后看到一个看上去像是 ID 的字符串（abcdef1145141919810abcdefabcdefa），没错，这个就是我们的identifier 。 获取自己的 X-Auth-Key登录 Cloudflare 可在这个页面 https://dash.cloudflare.com/profile/api-tokens 的 Global API Key 选项中查看。 获取 Access policy 的 ID有了自己账户的 identifier 与 X-Auth-Key 之后，就可以对上文提到的 API 发送请求了，以下是我开启 Access policy 后对该 API 发送请求的结果，我们可以得到 Access policy 的 ID ffffffff-1145-1419-1981-ffffffff。 12345678910111213141516171819202122232425262728293031323334353637383940{ &quot;result&quot;: [ { &quot;aud&quot;: &quot;*&quot;, &quot;created_at&quot;: &quot;*&quot;, &quot;domain&quot;: &quot;****&quot;, &quot;id&quot;: &quot;ffffffff-1145-1419-1981-ffffffff&quot;, &quot;name&quot;: &quot;***** - Cloudflare Pages&quot;, &quot;policies&quot;: [ { &quot;created_at&quot;: &quot;*&quot;, &quot;decision&quot;: &quot;allow&quot;, &quot;exclude&quot;: [], &quot;id&quot;: &quot;****&quot;, &quot;include&quot;: [ { &quot;email&quot;: { &quot;email&quot;: &quot;*@*****.****&quot; } } ], // ... } ], &quot;allowed_idps&quot;: [ &quot;*-****-*****&quot; ], &quot;auto_redirect_to_identity&quot;: false, &quot;session_duration&quot;: &quot;24h&quot;, &quot;ssh_logging_enabled&quot;: false, &quot;uid&quot;: &quot;****-****-*&quot;, &quot;updated_at&quot;: &quot;&quot;, &quot;type&quot;: &quot;self_hosted&quot;, &quot;app_launcher_visible&quot;: false } ], &quot;success&quot;: true, &quot;errors&quot;: [], &quot;messages&quot;: []} 关闭 Access policy有了 Access policy 的 ID 之后，就可以使用删除 Access Application 的接口关闭 Access policy。Cloudflare 是使用 RESTful 规范设计的 API，删除接口的 URL 就是将上文提到的接口，将 GET 换成 DELETE，并在最后加上 ID。 1DELETE accounts/:identifier/access/apps/:uuid 1234curl -X DELETE &quot;https://api.cloudflare.com/client/v4/accounts/abcdef1145141919810abcdefabcdefa/access/apps/ffffffff-1145-1419-1981-ffffffff&quot; \\ -H &quot;X-Auth-Email: user@example.com&quot; \\ -H &quot;X-Auth-Key: c2547eb745079dac9320b638f5e225cf483cc5cfdda41&quot; \\ -H &quot;Content-Type: application/json&quot; 发送 DELETE 请求后，返回结果类似以下的结果，状态码为 202 (Accepted)，恭喜你，你已经成功关闭了这该死的 Access policy！ 如果返回了其他的结果，请根据返回的结果中的提示，修改你请求中的参数。 12345678{ &quot;result&quot;: { &quot;id&quot;: &quot;ffffffff-1145-1419-1981-ffffffff&quot; }, &quot;success&quot;: true, &quot;errors&quot;: [], &quot;messages&quot;: []} 参考资料 https://community.cloudflare.com/t/how-can-i-disable-the-access-policy-of-cloudflare-pages/292358/8)","link":"/blog/2021/11/03/%E5%A6%82%E4%BD%95%E5%85%B3%E9%97%ADCloudflare%E7%9A%84Access-policy/"},{"title":"真步笔记，一个简单的公主连结Re:Dive计轴器。","text":"因为懒得做时间关系，暂时只支持国服已经实装的角色，可添加的技能只包括 UB 与破甲、加攻技能（也够用了）。 未来也许会添加台服，甚至日服已经实装的角色。或者是永远也不会添加。 版本 正在运行的实例 备注 Cloudflare Pages https://mahonotes.pages.dev/ 国内网络访问更快 GitHub Pages https://pinkchampagne17.github.io/MahoNotes/ 注：截图中蓝色的部分为 buff 的持续时间。 适用的游戏版本 国服 (bilibili) 港澳台服 (So-net Entertainment Taiwan) 日服 (Cygames) 支持语言 简体中文 繁體中文 日本語 English 使用的第三方库 Vue.js Vuex Bootstrap v4 Element UI","link":"/blog/2020/07/14/%E7%9C%9F%E6%AD%A5%E7%AC%94%E8%AE%B0%EF%BC%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%AC%E4%B8%BB%E8%BF%9E%E7%BB%93ReDive%E8%AE%A1%E8%BD%B4%E5%99%A8/"},{"title":"记录一次使用 VS Code 的 Prettier 插件不起作用的情况","text":"今天新建了一个新的项目，但在 VS Code 中使用 Prettier 对代码进行格式化时却没有任何反应。于是我打开了旧项目，打乱了一些代码，但此时的 Prettier 却是可以正常工作的。 我们使用快捷键 Ctrl + Shift + U 或点击左下角的 Infos 按钮，打开 Output 界面。在这个界面的右侧有一个菜单，选择 Prettier 选项后，可以看到带有 ERROR 字样的信息，这也就是为什么 VS Code 中的 Prettier 插件没有正常工作的原因。 如果在命令行中进入到项目的目录，使用 npx prettier --write .（使用 Prettier 格式化当前目录下的所有代码），也可以看到同样的信息，输出结果的格式会比在 VS Code 中看到的要好。 12345678910111213PS D:\\newProject&gt; npx exec prettier --write .[error] Invalid configuration file `.eslintrc.js`: JSON Error in D:\\newProject\\.prettierrc.json:[error][error] &gt; 1 | ��{}[error] | ^[error] 2 |[error][error] Unexpected token &quot;�&quot; (0xFFFD) in JSON at position 0 while parsing &quot;��{\\u0000}\\u0000\\n\\u0000&quot;[error][error] &gt; 1 | ��{}[error] | ^[error] 2 |[error] 错误信息提示我们 .prettierrc.json 文件出现了问题，但当时的 .prettierrc.json 文件内容如下： 1{} 文件只有一个空的 JSON 以及一个空行，为什么会导致 Prettier 报错呢？ 因为这个文件是使用 Windows 的 PowerShell 运行 echo {}&gt; .prettierrc.json 创建的，通过这种方式创建文件会与其他方式创建的文件会有有点不同（具体原因暂且未知，大概率是字符编码的问题），所以导致了这个问题的出现。 如果我们不使用 echo 命令配合 &gt; 操作符，而改使用 ni prettierrc.json 命令或图形化的方式创建一个新的文件后再追加内容，则不会出现这个问题。","link":"/blog/2022/01/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8VSCode%E7%9A%84Prettier%E6%8F%92%E4%BB%B6%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E6%83%85%E5%86%B5/"}],"tags":[{"name":"Go","slug":"Go","link":"/blog/tags/Go/"},{"name":"Vue","slug":"Vue","link":"/blog/tags/Vue/"},{"name":"HTML","slug":"HTML","link":"/blog/tags/HTML/"},{"name":"CSS","slug":"CSS","link":"/blog/tags/CSS/"},{"name":"PHP","slug":"PHP","link":"/blog/tags/PHP/"},{"name":"Windows","slug":"Windows","link":"/blog/tags/Windows/"},{"name":"WSL","slug":"WSL","link":"/blog/tags/WSL/"},{"name":"Linux","slug":"Linux","link":"/blog/tags/Linux/"},{"name":"Hexo","slug":"Hexo","link":"/blog/tags/Hexo/"},{"name":"JavaScript","slug":"JavaScript","link":"/blog/tags/JavaScript/"},{"name":"Cloudflare","slug":"Cloudflare","link":"/blog/tags/Cloudflare/"},{"name":"VS Code","slug":"VS-Code","link":"/blog/tags/VS-Code/"},{"name":"Prettier","slug":"Prettier","link":"/blog/tags/Prettier/"}],"categories":[{"name":"编程","slug":"编程","link":"/blog/categories/%E7%BC%96%E7%A8%8B/"},{"name":"我的项目","slug":"我的项目","link":"/blog/categories/%E6%88%91%E7%9A%84%E9%A1%B9%E7%9B%AE/"}]}